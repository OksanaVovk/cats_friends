{"version":3,"file":"static/js/783.9658276d.chunk.js","mappings":"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","sources":["components/ErrorMessage.js","schemas/register.js","components/RegistrationForm.js","pages/RegisterPage.js"],"sourcesContent":["import { Typography } from '@mui/material';\n\nconst ErrorMessage = ({ message }) => {\n  return message ? (\n    <Typography\n      sx={{ color: 'red', fontSize: '0.875rem', marginTop: '0.2rem' }}\n    >\n      {message}\n    </Typography>\n  ) : null;\n};\n\nexport default ErrorMessage;\n","import { z } from 'zod';\n\nexport const registerSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long' }),\n  email: z\n    .string()\n    .optional()\n    .refine(val => val === '' || z.string().email().safeParse(val).success, {\n      message: 'Invalid email address',\n    }),\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters long' }),\n});\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport authOperations from '../redux/auth/operations';\nimport { TextField, Button, Box, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { registerSchema } from 'schemas/register';\nimport ErrorMessage from './ErrorMessage';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100vh',\n  },\n  form: {\n    width: '100%',\n    maxWidth: 400,\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n  },\n  title: {\n    marginBottom: theme.spacing(2),\n    textAlign: 'center',\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.black.main,\n    transition: 'background-color 0.3s, color 0.3s',\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.white.main,\n    },\n  },\n}));\n\nfunction RegistrationForm() {\n  const classes = useStyles();\n  const [registerError, setRegisterError] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: zodResolver(registerSchema) });\n\n  const onSubmit = async data => {\n    try {\n      await dispatch(authOperations.register(data)).unwrap();\n      reset();\n      setRegisterError('');\n      navigate('/login', { replace: true });\n    } catch (error) {\n      setRegisterError(error || 'Register failed. Please try again.');\n    }\n  };\n\n  return (\n    <Box className={classes.root}>\n      {registerError && (\n        <Typography sx={{ color: 'red', marginBottom: '30px' }}>\n          {registerError}\n        </Typography>\n      )}\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\n        <Typography variant=\"h5\" className={classes.title} sx={{}}>\n          Register\n        </Typography>\n        <TextField\n          label=\"Name*\"\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          {...register('name')}\n        />\n        <ErrorMessage message={errors.name?.message} />\n\n        <TextField\n          label=\"Email*\"\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          {...register('email')}\n        />\n        <ErrorMessage message={errors.email?.message} />\n\n        <TextField\n          label=\"Password*\"\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          type=\"password\"\n          {...register('password')}\n        />\n        <ErrorMessage message={errors.password?.message} />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          className={classes.submitButton}\n        >\n          REGISTER\n        </Button>\n      </form>\n    </Box>\n  );\n}\n\nexport default RegistrationForm;\n","import RegistrationForm from 'components/RegistrationForm';\nimport { Box } from '@mui/material';\n\nconst RegisterPage = () => {\n  return (\n    <Box>\n      <RegistrationForm />\n    </Box>\n  );\n};\nexport default RegisterPage;\n"],"names":["message","sx","color","fontSize","marginTop","registerSchema","z","name","min","email","optional","refine","val","safeParse","success","password","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","height","form","width","maxWidth","padding","spacing","backgroundColor","palette","background","paper","borderRadius","boxShadow","title","marginBottom","textAlign","submitButton","primary","main","black","transition","secondary","white","classes","useState","registerError","setRegisterError","navigate","useNavigate","dispatch","useDispatch","useForm","resolver","zodResolver","register","handleSubmit","reset","errors","formState","onSubmit","data","authOperations","unwrap","replace","Box","className","Typography","variant","TextField","label","fullWidth","margin","ErrorMessage","type","Button"],"sourceRoot":""}