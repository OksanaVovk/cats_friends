{"version":3,"file":"static/js/226.fa6f4ae2.chunk.js","mappings":"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","sources":["components/ErrorMessage.js","schemas/login.js","components/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import { Typography } from '@mui/material';\n\nconst ErrorMessage = ({ message }) => {\n  return message ? (\n    <Typography\n      sx={{ color: 'red', fontSize: '0.875rem', marginTop: '0.2rem' }}\n    >\n      {message}\n    </Typography>\n  ) : null;\n};\n\nexport default ErrorMessage;\n","import { z } from 'zod';\n\nexport const loginSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address' }),\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters long' }),\n});\n","import { useState } from 'react';\nimport { TextField, Button, Box, Typography } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authSelector } from '../redux/auth/authSelectors';\nimport authOperations from '../redux/auth/operations';\nimport { makeStyles } from '@mui/styles';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { loginSchema } from 'schemas/login';\nimport ErrorMessage from './ErrorMessage';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  form: {\n    width: '100%',\n    maxWidth: 400,\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: '8px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n  },\n  title: {\n    marginBottom: theme.spacing(2),\n    textAlign: 'center',\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.black.main,\n    transition: 'background-color 0.3s, color 0.3s',\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.white.main,\n    },\n  },\n}));\n\nfunction LoginForm() {\n  const [loginError, setLoginError] = useState('');\n  const classes = useStyles();\n  const isLoggedIn = useSelector(authSelector.selectIsLoggedIn);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: zodResolver(loginSchema) });\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/', { replace: true });\n    }\n  }, [isLoggedIn, navigate]);\n\n  const onSubmit = async data => {\n    try {\n      await dispatch(authOperations.logIn(data)).unwrap();\n      reset();\n      setLoginError('');\n    } catch (error) {\n      setLoginError(error || 'Login failed. Please try again.');\n    }\n  };\n\n  return (\n    <Box className={classes.root}>\n      {loginError && (\n        <Typography sx={{ color: 'red', marginBottom: '30px' }}>\n          {loginError}\n        </Typography>\n      )}\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\n        <Typography variant=\"h5\" className={classes.title}>\n          Log in\n        </Typography>\n\n        <TextField\n          label=\"Email*\"\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          {...register('email')}\n        />\n        <ErrorMessage message={errors.email?.message} />\n\n        <TextField\n          label=\"Password*\"\n          variant=\"outlined\"\n          fullWidth\n          margin=\"normal\"\n          type=\"password\"\n          {...register('password')}\n        />\n        <ErrorMessage message={errors.password?.message} />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          className={classes.submitButton}\n        >\n          LOG IN\n        </Button>\n      </form>\n    </Box>\n  );\n}\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Box, Typography, Link } from '@mui/material';\n\nconst LoginPage = () => {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n        padding: { xs: '0px 10px', lg: '0px 0px' },\n      }}\n    >\n      <LoginForm />\n      <Typography\n        variant=\"body1\"\n        sx={{\n          fontSize: '24px',\n          marginTop: '30px',\n        }}\n      >\n        Don't have an account?{' '}\n        <Link\n          component={RouterLink}\n          to=\"/register\"\n          sx={{\n            fontSize: '24px',\n            color: theme => theme.palette.primary.main,\n            fontWeight: 'bold',\n            transition: 'color 0.2s ease-in-out',\n            '&:hover': {\n              color: theme => theme.palette.secondary.main,\n            },\n          }}\n        >\n          Sign up\n        </Link>\n      </Typography>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"names":["message","sx","color","fontSize","marginTop","loginSchema","z","email","password","min","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","form","width","maxWidth","padding","spacing","backgroundColor","palette","background","paper","borderRadius","boxShadow","title","marginBottom","textAlign","submitButton","primary","main","black","transition","secondary","white","useState","loginError","setLoginError","classes","isLoggedIn","useSelector","authSelector","navigate","useNavigate","dispatch","useDispatch","useForm","resolver","zodResolver","register","handleSubmit","reset","errors","formState","useEffect","replace","onSubmit","data","authOperations","unwrap","Box","className","Typography","variant","TextField","label","fullWidth","margin","ErrorMessage","type","Button","height","xs","lg","Link","component","RouterLink","to","fontWeight"],"sourceRoot":""}